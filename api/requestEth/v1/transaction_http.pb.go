// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/requestEth/v1/transaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionUsdtBalance = "/api.requestEth.v1.Transaction/UsdtBalance"

type TransactionHTTPServer interface {
	UsdtBalance(context.Context, *UsdtBalanceRequest) (*UsdtBalanceReply, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.GET("/api/usdt_balance", _Transaction_UsdtBalance0_HTTP_Handler(srv))
}

func _Transaction_UsdtBalance0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UsdtBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionUsdtBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UsdtBalance(ctx, req.(*UsdtBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UsdtBalanceReply)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	UsdtBalance(ctx context.Context, req *UsdtBalanceRequest, opts ...http.CallOption) (rsp *UsdtBalanceReply, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) UsdtBalance(ctx context.Context, in *UsdtBalanceRequest, opts ...http.CallOption) (*UsdtBalanceReply, error) {
	var out UsdtBalanceReply
	pattern := "/api/usdt_balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionUsdtBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
